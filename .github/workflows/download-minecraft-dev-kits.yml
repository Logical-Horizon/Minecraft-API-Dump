# 工作流名称
name: Weekly Minecraft Dev Kits Downloader and Releaser

# 工作流触发器
on:
  # 每周日凌晨0点 (UTC时间) 自动运行
  schedule:
    - cron: '0 0 * * 0'
  # 允许在 GitHub Actions 页面手动触发
  workflow_dispatch:

# 为整个工作流设置权限，使其能够创建 Release
permissions:
  contents: write

# 定义一系列任务
jobs:
  # --- 下载任务 (与之前相同) ---
  download-forge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download all Forge Installers and MDKs
        run: |
          mkdir -p forge-files
          echo "正在获取 Forge 版本列表..."
          curl -s http://files.minecraftforge.net/maven/net/minecraftforge/forge/json -o forge-versions.json
          echo "开始解析并下载 Forge 文件..."
          jq -r '.promos | to_entries[] | .value' forge-versions.json | while read -r version; do
            mc_version=$(echo "$version" | cut -d'-' -f1)
            forge_version=$(echo "$version" | cut -d'-' -f2)
            installer_url="https://files.minecraftforge.net/maven/net/minecraftforge/forge/${mc_version}-${forge_version}/forge-${mc_version}-${forge_version}-installer.jar"
            mdk_url="https://files.minecraftforge.net/maven/net/minecraftforge/forge/${mc_version}-${forge_version}/forge-${mc_version}-${forge_version}-mdk.zip"
            wget -q -P forge-files/ "$installer_url" || echo "无法下载 Installer: $version"
            wget -q -P forge-files/ "$mdk_url" || echo "无法下载 MDK: $version"
          done
          echo "Forge 文件下载完成。"
      - name: Upload Forge artifacts
        uses: actions/upload-artifact@v4
        with:
          name: forge-files
          path: forge-files/

  download-fabric:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download Fabric Installer and API
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p fabric-files/installer fabric-files/api
          echo "正在下载 Fabric Universal Installer..."
          LATEST_INSTALLER_VERSION=$(curl -s https://maven.fabricmc.net/net/fabricmc/fabric-installer/maven-metadata.xml | grep -oP '<latest>\K[^<]+')
          wget -q -P fabric-files/installer/ "https://maven.fabricmc.net/net/fabricmc/fabric-installer/${LATEST_INSTALLER_VERSION}/fabric-installer-${LATEST_INSTALLER_VERSION}.jar"
          echo "正在获取并下载所有 Fabric API 版本..."
          gh release list -R FabricMC/fabric -L 1000 --json tagName -q '.[].tagName' | while read tag; do
            gh release download "$tag" -R FabricMC/fabric -p 'fabric-api-*.jar' --dir "fabric-files/api/${tag}" --clobber || echo "无法下载 API: $tag"
          done
          echo "Fabric 文件下载完成。"
      - name: Upload Fabric artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fabric-files
          path: fabric-files/

  download-neoforge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download all NeoForge Installers and Universal files
        run: |
          mkdir -p neoforge-files
          echo "正在获取 NeoForge 版本列表..."
          curl -s "https://maven.neoforged.net/net/neoforged/neoforge/maven-metadata.xml" | grep -oP '<version>\K[^<]+' | while read -r version; do
            installer_url="https://maven.neoforged.net/net/neoforged/neoforge/${version}/neoforge-${version}-installer.jar"
            universal_url="https://maven.neoforged.net/net/neoforged/neoforge/${version}/neoforge-${version}-universal.jar"
            wget -q -P "neoforge-files/${version}/" "$installer_url" || echo "无法下载 NeoForge Installer: $version"
            wget -q -P "neoforge-files/${version}/" "$universal_url" || echo "无法下载 NeoForge Universal: $version"
          done
          echo "NeoForge 文件下载完成。"
      - name: Upload NeoForge artifacts
        uses: actions/upload-artifact@v4
        with:
          name: neoforge-files
          path: neoforge-files/

  # --- 创建 Release 的任务 (已修正和优化) ---
  create-release:
    runs-on: ubuntu-latest
    needs: [download-forge, download-fabric, download-neoforge]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Zip artifacts
        run: |
          cd artifacts
          zip -r ../forge-files.zip forge-files
          zip -r ../fabric-files.zip fabric-files
          zip -r ../neoforge-files.zip neoforge-files
      
      # 新增步骤：获取当前日期作为环境变量
      - name: Get current date
        id: date
        run: echo "TAG_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      # 已修正和优化的创建 Release 步骤
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          # 使用日期作为 Release 标题，更清晰
          name: Dev Kits - ${{ env.TAG_DATE }}
          # 修正了语法错误，并使用日期作为 tag
          tag_name: weekly-${{ env.TAG_DATE }}
          body: |
            Automated weekly collection of Minecraft modding development kits.
            - **Forge**: Installers and MDKs.
            - **Fabric**: Installer and all API versions.
            - **NeoForge**: Installers and Universal JARs.
          files: |
            forge-files.zip
            fabric-files.zip
            neoforge-files.zip
