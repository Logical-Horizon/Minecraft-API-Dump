name: Accelerated and Stabilized Incremental Releaser

on:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # 任务 1: 创建草稿 Release (无改动)
  create-draft:
    runs-on: ubuntu-latest
    outputs:
      tag: weekly-${{ env.TAG_DATE }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Get current date
        id: date
        run: echo "TAG_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
      - name: Create Draft Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.TAG_DATE }}
          tag_name: weekly-${{ env.TAG_DATE }}
          body: |
            Automated weekly collection of Minecraft modding development kits. This release is built incrementally and in parallel.
            - **Forge**: Per-MC-version archives.
            - **Fabric**: Installer and Per-API-version archives.
            - **NeoForge**: Per-version archives from the Maven repository.
          draft: true

  # 任务 2: 并行处理 Forge (无改动)
  process-forge:
    runs-on: ubuntu-latest
    needs: create-draft
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Process and Upload Forge Incrementally
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.create-draft.outputs.tag }}
        run: |
          echo "--- Starting Forge Incremental Processing (wget mode) ---"
          INDEX_PAGES=$(curl -s https://files.minecraftforge.net/net/minecraftforge/forge/ | grep -oP 'href="(index_[^"]+\.html)"' | sed 's/href="\([^"]*\)"/\1/')
          
          for page in $INDEX_PAGES; do
            MC_VERSION=$(echo "$page" | sed -e 's/index_//' -e 's/\.html//')
            echo "--- Processing Forge for MC Version: $MC_VERSION ---"
            
            TEMP_DIR="forge_temp_${MC_VERSION}"
            mkdir -p "$TEMP_DIR"
            
            PAGE_URL="https://files.minecraftforge.net/net/minecraftforge/forge/$page"
            curl -s "$PAGE_URL" | grep -oP 'https://adfoc\.us/serve/sitelinks/[^"]+' | grep -iE 'installer|mdk|src|universal' | sort -u | sed -n 's/.*url=\(.*\)/\1/p' | while read -r DOWNLOAD_URL; do
              if [[ -n "$DOWNLOAD_URL" ]]; then
                FILENAME=$(basename "$DOWNLOAD_URL")
                echo "Downloading: $FILENAME"
                wget -P "$TEMP_DIR/" "$DOWNLOAD_URL" || echo "  -> Download failed: $FILENAME"
              fi
            done

            if [ -z "$(ls -A "$TEMP_DIR")" ]; then
              echo "No files downloaded for $MC_VERSION, skipping."
              rm -rf "$TEMP_DIR"
              continue
            fi
            
            ARCHIVE_NAME="forge-${MC_VERSION}.tar.xz"
            echo "Archiving to $ARCHIVE_NAME"
            tar --use-compress-program="xz -T0" -cvf "$ARCHIVE_NAME" -C "$TEMP_DIR" .
            
            echo "Uploading $ARCHIVE_NAME"
            gh release upload "$TAG" "$ARCHIVE_NAME" --clobber
            
            echo "Cleaning up local files for $MC_VERSION"
            rm -rf "$TEMP_DIR" "$ARCHIVE_NAME"
          done

  # 任务 3: 并行处理 Fabric (无改动)
  process-fabric:
    runs-on: ubuntu-latest
    needs: create-draft
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Process and Upload Fabric Incrementally
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.create-draft.outputs.tag }}
        run: |
          echo "--- Starting Fabric Incremental Processing ---"
          echo "Processing Fabric Installer..."
          INSTALLER_VERSION=$(curl -s https://maven.fabricmc.net/net/fabricmc/fabric-installer/maven-metadata.xml | grep -oP '<latest>\K[^<]+')
          INSTALLER_URL="https://maven.fabricmc.net/net/fabricmc/fabric-installer/${INSTALLER_VERSION}/fabric-installer-${INSTALLER_VERSION}.jar"
          TEMP_DIR="fabric_installer_temp"
          mkdir -p "$TEMP_DIR"
          wget -P "$TEMP_DIR/" "$INSTALLER_URL"
          ARCHIVE_NAME="fabric-installer.tar.xz"
          tar --use-compress-program="xz -T0" -cvf "$ARCHIVE_NAME" -C "$TEMP_DIR" .
          echo "Uploading $ARCHIVE_NAME"
          gh release upload "$TAG" "$ARCHIVE_NAME" --clobber
          rm -rf "$TEMP_DIR" "$ARCHIVE_NAME"
          
          echo "Processing Fabric APIs..."
          gh release list -R FabricMC/fabric -L 2000 --json tagName -q '.[].tagName' | while read tag; do
            echo "--- Processing Fabric API Version: $tag ---"
            TEMP_DIR="fabric_api_temp_${tag}"
            gh release download "$tag" -R FabricMC/fabric -p 'fabric-api-*.jar' --dir "$TEMP_DIR" --clobber || { echo "No assets found for $tag, skipping."; continue; }
            if [ -z "$(ls -A "$TEMP_DIR")" ]; then rm -rf "$TEMP_DIR"; continue; fi
            ARCHIVE_NAME="fabric-api-${tag}.tar.xz"
            tar --use-compress-program="xz -T0" -cvf "$ARCHIVE_NAME" -C "$TEMP_DIR" .
            echo "Uploading $ARCHIVE_NAME"
            gh release upload "$TAG" "$ARCHIVE_NAME" --clobber
            rm -rf "$TEMP_DIR" "$ARCHIVE_NAME"
          done
  
  # ===================================================================
  # 任务 4: 并行处理 NeoForge (已按您的要求重写)
  # ===================================================================
  process-neoforge:
    runs-on: ubuntu-latest
    needs: create-draft
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Process and Upload NeoForge Incrementally (via maven-metadata.xml)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.create-draft.outputs.tag }}
        run: |
          echo "--- Starting NeoForge Incremental Processing (maven-metadata.xml mode) ---"
          
          # 从 maven-metadata.xml 获取所有版本号
          VERSIONS=$(curl -s "https://maven.neoforged.net/releases/net/neoforged/neoforge/maven-metadata.xml" | grep -oP '<version>\K[^<]+')
          
          for VERSION in $VERSIONS; do
            echo "--- Processing NeoForge Version: $VERSION ---"
            
            TEMP_DIR="neoforge_temp_${VERSION}"
            mkdir -p "$TEMP_DIR"

            # 拼接下载链接
            INSTALLER_URL="https://maven.neoforged.net/releases/net/neoforged/neoforge/${VERSION}/neoforge-${VERSION}-installer.jar"
            UNIVERSAL_URL="https://maven.neoforged.net/releases/net/neoforged/neoforge/${VERSION}/neoforge-${VERSION}-universal.jar"
            
            # 下载文件
            echo "Downloading installer for $VERSION..."
            wget -P "$TEMP_DIR/" "$INSTALLER_URL" || echo "  -> No installer found for $VERSION"
            echo "Downloading universal for $VERSION..."
            wget -P "$TEMP_DIR/" "$UNIVERSAL_URL" || echo "  -> No universal found for $VERSION"
            
            # 检查是否有文件被下载
            if [ -z "$(ls -A "$TEMP_DIR")" ]; then
              echo "No files downloaded for $VERSION, skipping."
              rm -rf "$TEMP_DIR"
              continue
            fi
            
            ARCHIVE_NAME="neoforge-${VERSION}.tar.xz"
            echo "Archiving to $ARCHIVE_NAME"
            tar --use-compress-program="xz -T0" -cvf "$ARCHIVE_NAME" -C "$TEMP_DIR" .
            
            echo "Uploading $ARCHIVE_NAME"
            gh release upload "$TAG" "$ARCHIVE_NAME" --clobber
            
            echo "Cleaning up local files for $VERSION"
            rm -rf "$TEMP_DIR" "$ARCHIVE_NAME"
          done

  # 任务 5: 发布 Release (无改动)
  publish-release:
    runs-on: ubuntu-latest
    needs: [process-forge, process-fabric, process-neoforge]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-draft.outputs.tag }}
          draft: false
